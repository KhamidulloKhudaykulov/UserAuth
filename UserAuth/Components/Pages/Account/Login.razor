@page "/login"

@using Microsoft.AspNetCore.Authentication
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies
@using UserAuth.DataAccess.Contexts
@using UserAuth.Model.Users
@using UserAuth.Service.Services
@inject IUserService userService
@inject NavigationManager navigationManager


<div class="row">
    <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
        <DataAnnotationsValidator />
        <div class="mb-3 text-center flex-column">
            <h3>LOGIN</h3>
        </div> 
        <div class="mb-3">
            <label>Name</label>
            <InputText @bind-Value="Model.FirstName" class="form-control" placeholder="firstname" />
            <ValidationMessage For="() => Model.FirstName" />
        </div>
        <div class="mb-3">
            <label>Surname</label>
            <InputText @bind-Value="Model.LastName" class="form-control" placeholder="lastname" />
            <ValidationMessage For="() => Model.FirstName" />
        </div>
        <div class="mb-3">
            <label>Email</label>
            <InputText @bind-Value="Model.Email" class="form-control" placeholder="email" />
            <ValidationMessage For="() => Model.FirstName" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <InputText @bind-Value="Model.Password" class="form-control" placeholder="password" />
            <ValidationMessage For="() => Model.FirstName" />
        </div>
        <div class="mb-3 text-center">
            <span class="text-danger"></span>
        </div>
        <div class="mb-3 d-grid gap-2">
            <button type="submit" class="btn btn-primary">Login</button>
        </div>
    </EditForm>
    @if (errorMessage is not null)
    {
        <p style="color: red">@errorMessage</p>        
    }
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public UserCreateModel Model { get; set; } = new();

    private string? errorMessage;
    private async Task Authenticate()
    {
        try
        {
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, Model.FirstName),
                new Claim(ClaimTypes.Surname, Model.LastName),
                new Claim(ClaimTypes.Email, Model.Email),
            };

            await userService.CreateAsync(Model);
            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);
            // await HttpContext.SignInAsync(principal);
            navigationManager.NavigateTo("/counter", true);
        }
        catch(Exception ex)
        {
            errorMessage = ex.Message;
            return;
        }
    }
}
